package com.example.service

import org.springframework.web.bind.annotation.{GetMapping, RequestMapping, RestController}
import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.Parameter
import io.swagger.v3.oas.annotations.responses.ApiResponse
import org.springframework.http.{MediaType, ResponseEntity}

@RestController
@RequestMapping(value = Array("/routing"), produces = Array(MediaType.APPLICATION_JSON_VALUE))
class RestHashService {

  @GetMapping(value = Array("/{userId}"))
  @Operation(
    summary = "Route by User ID",
    description = "Routes to Kafka topic based on userId",
    tags = Array("User"),
    parameters = Array(
      new Parameter(name = "userId", description = "User ID", required = true, `type` = "string")
    ),
    responses = Array(
      new ApiResponse(responseCode = "200", description = "Successfully handled routing"),
      new ApiResponse(responseCode = "500", description = "Internal server error")
    )
  )
  def routeByUserId(@Parameter(description = "User ID", required = true) userId: String): ResponseEntity[String] = {
    try {
      case Success(s) => info(s"routeByUserId invoked for userId: ${userId}")
        ResponseEntity.ok(s"Successfully handled routing for /routing/kafka/${userId} -> $$s")
      case Failure(e) => ResponseEntity.status(Response.Status.INTERNAL_SERVER_ERROR)
        .entity(e.getMessage).`type`(MediaType.TEXT_PLAIN_TYPE).build()
    } catch {
      case e: Throwable => ResponseEntity.status(Response.Status.INTERNAL_SERVER_ERROR)
        .entity(e.getMessage).`type`(MediaType.TEXT_PLAIN_TYPE).build()
    }
  }
}

implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
